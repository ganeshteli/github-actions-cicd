name: Pull Request Test

on:
  pull_request:
    branches: [master]

jobs:
  pull-request-test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name : clone code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: mvn build check
        id: maven
        run: mvn clean install        
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: SonarQube Quality Gate Status
        run: echo "Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
      
      - uses: actions/github-script@v6
        if: ${{ success() || failure() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            // Get the existing comments for the PR
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            // Find any comment already made by the bot.                                                                                                    
            const botComment = comments.find(comment => comment.user.type === "Bot")                                                                       
            const commentBody = "Hello from actions/github-script! (${{ github.sha }})"                  
            //prepare comment
            const outputcmt1 = "#### Maven Build - '\${{ steps.maven.outputs.mvnOutput }}\'"
            const outputcmt = outputcmt1 + "#### Sonar check - '\${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}\'";
            //If we have comment then update it, otherwise create. 
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: outputcmt
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: outputcmt
              })
            }
